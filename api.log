warning: unused imports: `error` and `warn`
 --> src/main.rs:6:21
  |
6 | use tracing::{info, error, warn};
  |                     ^^^^^  ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
 --> src/mesh_node.rs:5:27
  |
5 | use tracing::{info, warn, error, debug};
  |                           ^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/dashboard.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
  --> src/network.rs:54:13
   |
54 |         let mut transport = tcp_transport.boxed();
   |             ----^^^^^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `bt`
   --> src/mesh_node.rs:125:29
    |
125 |         if let Some(ref mut bt) = self.bluetooth_transport {
    |                             ^^ help: if this is intentional, prefix it with an underscore: `_bt`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `conn_manager`
   --> src/main.rs:257:17
    |
257 |         let mut conn_manager = BluetoothConnectionManager::new()?;
    |                 ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_conn_manager`

warning: unused variable: `msg_handler`
   --> src/main.rs:262:13
    |
262 |         let msg_handler = BluetoothMessageHandler::new();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_msg_handler`

warning: variable does not need to be mutable
   --> src/main.rs:257:13
    |
257 |         let mut conn_manager = BluetoothConnectionManager::new()?;
    |             ----^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: field `command_sender` is never read
  --> src/network.rs:28:5
   |
24 | pub struct TrainDBNode {
   |            ----------- field in this struct
...
28 |     command_sender: mpsc::UnboundedSender<NetworkCommand>,
   |     ^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: variants `SetKey`, `GetKey`, `DeleteKey`, `ListKeys`, and `BroadcastMessage` are never constructed
  --> src/network.rs:34:5
   |
33 | pub enum NetworkCommand {
   |          -------------- variants in this enum
34 |     SetKey { key: String, value: String },
   |     ^^^^^^
35 |     GetKey { key: String },
   |     ^^^^^^
36 |     DeleteKey { key: String },
   |     ^^^^^^^^^
37 |     ListKeys,
   |     ^^^^^^^^
38 |     BroadcastMessage { message: Vec<u8> },
   |     ^^^^^^^^^^^^^^^^
   |
   = note: `NetworkCommand` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `peer_id`, `listen_addresses`, `add_bootstrap_peer`, and `get_command_sender` are never used
   --> src/network.rs:114:12
    |
41  | impl TrainDBNode {
    | ---------------- methods in this implementation
...
114 |     pub fn peer_id(&self) -> PeerId {
    |            ^^^^^^^
...
118 |     pub fn listen_addresses(&self) -> Vec<Multiaddr> {
    |            ^^^^^^^^^^^^^^^^
...
122 |     pub async fn add_bootstrap_peer(&mut self, addr: &str) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^^^
...
295 |     pub fn get_command_sender(&self) -> mpsc::UnboundedSender<NetworkCommand> {
    |            ^^^^^^^^^^^^^^^^^^

warning: method `exists` is never used
  --> src/storage.rs:19:8
   |
13 | pub trait Storage: Send + Sync {
   |           ------- method in this trait
...
19 |     fn exists(&self, key: &str) -> Result<bool>;
   |        ^^^^^^

warning: methods `get_peer_id`, `get_listen_addresses`, and `connect_to_peer` are never used
  --> src/bluetooth.rs:21:8
   |
18 | pub trait MultiTransport: Send + Sync {
   |           -------------- methods in this trait
...
21 |     fn get_peer_id(&self) -> PeerId;
   |        ^^^^^^^^^^^
22 |     fn get_listen_addresses(&self) -> Vec<Multiaddr>;
   |        ^^^^^^^^^^^^^^^^^^^^
23 |     async fn discover_peers(&mut self) -> Result<Vec<PeerId>>;
24 |     async fn connect_to_peer(&mut self, peer_id: PeerId) -> Result<()>;
   |              ^^^^^^^^^^^^^^^

warning: fields `peer_id` and `listen_addresses` are never read
  --> src/bluetooth.rs:30:5
   |
29 | pub struct BluetoothTransport {
   |            ------------------ fields in this struct
30 |     peer_id: PeerId,
   |     ^^^^^^^
31 |     listen_addresses: Vec<Multiaddr>,
   |     ^^^^^^^^^^^^^^^^

warning: field `discovered_peers` is never read
   --> src/bluetooth.rs:270:5
    |
266 | pub struct BluetoothDiscovery {
    |            ------------------ field in this struct
...
270 |     discovered_peers: Arc<Mutex<HashMap<String, String>>>,
    |     ^^^^^^^^^^^^^^^^

warning: method `get_discovered_peers` is never used
   --> src/bluetooth.rs:305:18
    |
273 | impl BluetoothDiscovery {
    | ----------------------- method in this implementation
...
305 |     pub async fn get_discovered_peers(&self) -> HashMap<String, String> {
    |                  ^^^^^^^^^^^^^^^^^^^^

warning: field `connections` is never read
   --> src/bluetooth.rs:322:5
    |
320 | pub struct BluetoothConnectionManager {
    |            -------------------------- field in this struct
321 |     #[cfg(feature = "bluetooth")]
322 |     connections: Arc<Mutex<HashMap<String, String>>>,
    |     ^^^^^^^^^^^

warning: methods `connect_to_peer`, `disconnect_from_peer`, and `get_connections` are never used
   --> src/bluetooth.rs:333:18
    |
325 | impl BluetoothConnectionManager {
    | ------------------------------- methods in this implementation
...
333 |     pub async fn connect_to_peer(&mut self, address: String) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^
...
350 |     pub async fn disconnect_from_peer(&mut self, address: String) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^^^^^
...
367 |     pub async fn get_connections(&self) -> HashMap<String, String> {
    |                  ^^^^^^^^^^^^^^^

warning: field `message_queue` is never read
   --> src/bluetooth.rs:384:5
    |
382 | pub struct BluetoothMessageHandler {
    |            ----------------------- field in this struct
383 |     #[cfg(feature = "bluetooth")]
384 |     message_queue: Arc<Mutex<Vec<BluetoothMessage>>>,
    |     ^^^^^^^^^^^^^

warning: fields `from`, `to`, `data`, and `timestamp` are never read
   --> src/bluetooth.rs:389:9
    |
388 | pub struct BluetoothMessage {
    |            ---------------- fields in this struct
389 |     pub from: String,
    |         ^^^^
390 |     pub to: String,
    |         ^^
391 |     pub data: Vec<u8>,
    |         ^^^^
392 |     pub timestamp: chrono::DateTime<chrono::Utc>,
    |         ^^^^^^^^^
    |
    = note: `BluetoothMessage` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `send_message` and `handle_incoming_messages` are never used
   --> src/bluetooth.rs:403:18
    |
395 | impl BluetoothMessageHandler {
    | ---------------------------- methods in this implementation
...
403 |     pub async fn send_message(&self, to: String, data: Vec<u8>) -> Result<()> {
    |                  ^^^^^^^^^^^^
...
426 |     pub async fn handle_incoming_messages(&mut self) -> Result<()> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: fields `peer_id`, `last_seen`, and `is_connected` are never read
  --> src/mesh_node.rs:20:9
   |
19 | pub struct PeerInfo {
   |            -------- fields in this struct
20 |     pub peer_id: PeerId,
   |         ^^^^^^^
21 |     pub transport: TransportType,
22 |     pub last_seen: chrono::DateTime<chrono::Utc>,
   |         ^^^^^^^^^
23 |     pub is_connected: bool,
   |         ^^^^^^^^^^^^
   |
   = note: `PeerInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `storage` is never read
  --> src/mesh_node.rs:29:5
   |
28 | pub struct AutoMeshNode {
   |            ------------ field in this struct
29 |     storage: Arc<Mutex<Box<dyn Storage>>>,
   |     ^^^^^^^

warning: associated items `update_bluetooth_peers`, `send_message`, and `send_via_wifi` are never used
   --> src/mesh_node.rs:199:14
    |
36  | impl AutoMeshNode {
    | ----------------- associated items in this implementation
...
199 |     async fn update_bluetooth_peers(
    |              ^^^^^^^^^^^^^^^^^^^^^^
...
259 |     pub async fn send_message(&mut self, peer_id: PeerId, message: Vec<u8>) -> Result<()> {
    |                  ^^^^^^^^^^^^
...
286 |     async fn send_via_wifi(&self, _peer_id: PeerId, _message: Vec<u8>) -> Result<()> {
    |              ^^^^^^^^^^^^^

warning: methods `increment_messages_sent`, `increment_messages_received`, and `add_activity` are never used
  --> src/dashboard.rs:58:12
   |
47 | impl Dashboard {
   | -------------- methods in this implementation
...
58 |     pub fn increment_messages_sent(&self) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^
...
64 |     pub fn increment_messages_received(&self) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
70 |     pub fn add_activity(&self, activity: String) {
   |            ^^^^^^^^^^^^

warning: `train-db` (bin "train-db") generated 25 warnings (run `cargo fix --bin "train-db"` to apply 5 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.36s
     Running `target/debug/train-db --db-path ./demo-data api --port 8081`
2025-09-21T17:54:59.795849Z  INFO train_db: Starting Train-DB P2P Node
2025-09-21T17:54:59.796041Z  INFO train_db: Starting TrainDB HTTP API server on port 8081
Error: IO error: While lock file: ./demo-data/LOCK: Resource temporarily unavailable
